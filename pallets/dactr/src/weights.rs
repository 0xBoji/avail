// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for da_control
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-22, STEPS: `10`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `DESKTOP-PAL18UV`, CPU: `AMD Ryzen 5 5600X 6-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/data-avail
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=2
// --log=warn
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --header=./HEADER-APACHE2
// --pallet=da-control
// --extrinsic=*
// --output=./pallets/dactr/src/weights.rs
// -linfo

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for da_control.
pub trait WeightInfo {
	fn create_application_key() -> Weight;
	fn submit_block_length_proposal() -> Weight;
	fn submit_data(i: u32, ) -> Weight;
	fn data_root(i: u32, ) -> Weight;
	fn commitment_builder_32(i: u32, ) -> Weight;
	fn commitment_builder_64(i: u32, ) -> Weight;
	fn commitment_builder_128(i: u32, ) -> Weight;
	fn commitment_builder_256(i: u32, ) -> Weight;
}

/// Weights for da_control using the Data Avaiability node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DataAvailability AppKeys (r:1 w:1)
	// Storage: DataAvailability NextAppId (r:1 w:1)
	fn create_application_key() -> Weight {
		// Minimum execution time: 24_807 nanoseconds.
		Weight::from_ref_time(30_767_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: System DynamicBlockLength (r:0 w:1)
	fn submit_block_length_proposal() -> Weight {
		// Minimum execution time: 18_465 nanoseconds.
		Weight::from_ref_time(23_174_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// The range of component `i` is `[1, 16384]`.
	fn submit_data(i: u32, ) -> Weight {
		// Minimum execution time: 16_481 nanoseconds.
		Weight::from_ref_time(19_811_609_u64)
			// Standard Error: 175
			.saturating_add(Weight::from_ref_time(754_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[0, 16384]`.
	fn data_root(i: u32, ) -> Weight {
		// Minimum execution time: 962 nanoseconds.
		Weight::from_ref_time(2_350_594_u64)
			// Standard Error: 39
			.saturating_add(Weight::from_ref_time(718_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_32(i: u32, ) -> Weight {
		// Minimum execution time: 52_551_059 nanoseconds.
		Weight::from_ref_time(52_551_059_000_u64)
			// Standard Error: 49_469_966
			.saturating_add(Weight::from_ref_time(865_647_246_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_64(i: u32, ) -> Weight {
		// Minimum execution time: 57_025_757 nanoseconds.
		Weight::from_ref_time(57_025_757_000_u64)
			// Standard Error: 63_476_002
			.saturating_add(Weight::from_ref_time(1_026_939_491_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_128(i: u32, ) -> Weight {
		// Minimum execution time: 92_702_125 nanoseconds.
		Weight::from_ref_time(92_702_125_000_u64)
			// Standard Error: 163_289_809
			.saturating_add(Weight::from_ref_time(1_962_040_891_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_256(i: u32, ) -> Weight {
		// Minimum execution time: 172_232_397 nanoseconds.
		Weight::from_ref_time(121_306_026_622_u64)
			// Standard Error: 280_243_375
			.saturating_add(Weight::from_ref_time(3_371_707_784_u64).saturating_mul(i as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DataAvailability AppKeys (r:1 w:1)
	// Storage: DataAvailability NextAppId (r:1 w:1)
	fn create_application_key() -> Weight {
		// Minimum execution time: 24_807 nanoseconds.
		Weight::from_ref_time(30_767_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: System DynamicBlockLength (r:0 w:1)
	fn submit_block_length_proposal() -> Weight {
		// Minimum execution time: 18_465 nanoseconds.
		Weight::from_ref_time(23_174_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// The range of component `i` is `[1, 16384]`.
	fn submit_data(i: u32, ) -> Weight {
		// Minimum execution time: 16_481 nanoseconds.
		Weight::from_ref_time(19_811_609_u64)
			// Standard Error: 175
			.saturating_add(Weight::from_ref_time(754_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[0, 16384]`.
	fn data_root(i: u32, ) -> Weight {
		// Minimum execution time: 962 nanoseconds.
		Weight::from_ref_time(2_350_594_u64)
			// Standard Error: 39
			.saturating_add(Weight::from_ref_time(718_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_32(i: u32, ) -> Weight {
		// Minimum execution time: 52_551_059 nanoseconds.
		Weight::from_ref_time(52_551_059_000_u64)
			// Standard Error: 49_469_966
			.saturating_add(Weight::from_ref_time(865_647_246_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_64(i: u32, ) -> Weight {
		// Minimum execution time: 57_025_757 nanoseconds.
		Weight::from_ref_time(57_025_757_000_u64)
			// Standard Error: 63_476_002
			.saturating_add(Weight::from_ref_time(1_026_939_491_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_128(i: u32, ) -> Weight {
		// Minimum execution time: 92_702_125 nanoseconds.
		Weight::from_ref_time(92_702_125_000_u64)
			// Standard Error: 163_289_809
			.saturating_add(Weight::from_ref_time(1_962_040_891_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_256(i: u32, ) -> Weight {
		// Minimum execution time: 172_232_397 nanoseconds.
		Weight::from_ref_time(121_306_026_622_u64)
			// Standard Error: 280_243_375
			.saturating_add(Weight::from_ref_time(3_371_707_784_u64).saturating_mul(i as u64))
	}
}
