
//! Autogenerated weights for da_control
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-23, STEPS: `50`, REPEAT: 30, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `DESKTOP-PAL18UV`, CPU: `AMD Ryzen 5 5600X 6-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/data-avail
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=30
// --log=warn
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --pallet=da-control
// --extrinsic=*
// --output=./pallets/dactr/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for da_control.
pub trait WeightInfo {
	fn create_application_key() -> Weight;
	fn submit_data(i: u32, ) -> Weight;
	fn submit_block_length_proposal() -> Weight;
}

/// Weights for da_control using the Data Avaiability node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DataAvailability AppKeys (r:1 w:1)
	// Storage: DataAvailability NextAppId (r:1 w:1)
	fn create_application_key() -> Weight {
		// Minimum execution time: 22_172 nanoseconds.
		Weight::from_ref_time(22_864_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	/// The range of component `i` is `[0, 16384]`.
	fn submit_data(i: u32, ) -> Weight {
		// Minimum execution time: 14_317 nanoseconds.
		Weight::from_ref_time(15_616_256 as u64)
			// Standard Error: 7
			.saturating_add(Weight::from_ref_time(590 as u64).saturating_mul(i as u64))
	}
	// Storage: DataAvailability LastBlockLenId (r:1 w:1)
	// Storage: System DynamicBlockLength (r:0 w:1)
	fn submit_block_length_proposal() -> Weight {
		// Minimum execution time: 18_195 nanoseconds.
		Weight::from_ref_time(18_725_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DataAvailability AppKeys (r:1 w:1)
	// Storage: DataAvailability NextAppId (r:1 w:1)
	fn create_application_key() -> Weight {
		// Minimum execution time: 22_172 nanoseconds.
		Weight::from_ref_time(22_864_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	/// The range of component `i` is `[0, 16384]`.
	fn submit_data(i: u32, ) -> Weight {
		// Minimum execution time: 14_317 nanoseconds.
		Weight::from_ref_time(15_616_256 as u64)
			// Standard Error: 7
			.saturating_add(Weight::from_ref_time(590 as u64).saturating_mul(i as u64))
	}
	// Storage: DataAvailability LastBlockLenId (r:1 w:1)
	// Storage: System DynamicBlockLength (r:0 w:1)
	fn submit_block_length_proposal() -> Weight {
		// Minimum execution time: 18_195 nanoseconds.
		Weight::from_ref_time(18_725_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
}
