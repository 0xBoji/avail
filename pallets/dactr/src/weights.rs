// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for da_control
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-23, STEPS: `20`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `DESKTOP-PAL18UV`, CPU: `AMD Ryzen 5 5600X 6-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/data-avail
// benchmark
// pallet
// --chain=dev
// --steps=20
// --repeat=2
// --log=warn
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --header=./HEADER-APACHE2
// --pallet=da-control
// --extrinsic=*
// --output=./pallets/dactr/src/weights.rs
// -linfo

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for da_control.
pub trait WeightInfo {
	fn create_application_key() -> Weight;
	fn submit_block_length_proposal() -> Weight;
	fn submit_data(i: u32, ) -> Weight;
	fn data_root(i: u32, ) -> Weight;
	fn commitment_builder_32(i: u32, ) -> Weight;
	fn commitment_builder_64(i: u32, ) -> Weight;
	fn commitment_builder_128(i: u32, ) -> Weight;
	fn commitment_builder_256(i: u32, ) -> Weight;
}

/// Weights for da_control using the Data Avaiability node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DataAvailability AppKeys (r:1 w:1)
	// Storage: DataAvailability NextAppId (r:1 w:1)
	fn create_application_key() -> Weight {
		// Minimum execution time: 26_209 nanoseconds.
		Weight::from_ref_time(32_160_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: System DynamicBlockLength (r:0 w:1)
	fn submit_block_length_proposal() -> Weight {
		// Minimum execution time: 17_803 nanoseconds.
		Weight::from_ref_time(22_712_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// The range of component `i` is `[1, 524288]`.
	fn submit_data(i: u32, ) -> Weight {
		// Minimum execution time: 16_220 nanoseconds.
		Weight::from_ref_time(77_813_370_u64)
			// Standard Error: 70
			.saturating_add(Weight::from_ref_time(547_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[0, 524288]`.
	fn data_root(i: u32, ) -> Weight {
		// Minimum execution time: 942 nanoseconds.
		Weight::from_ref_time(942_000_u64)
			// Standard Error: 9
			.saturating_add(Weight::from_ref_time(734_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_32(i: u32, ) -> Weight {
		// Minimum execution time: 1_382_608 nanoseconds.
		Weight::from_ref_time(1_382_608_000_u64)
			// Standard Error: 104_335_042
			.saturating_add(Weight::from_ref_time(266_654_205_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_64(i: u32, ) -> Weight {
		// Minimum execution time: 1_864_972 nanoseconds.
		Weight::from_ref_time(1_864_972_000_u64)
			// Standard Error: 76_852_825
			.saturating_add(Weight::from_ref_time(1_100_873_711_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_128(i: u32, ) -> Weight {
		// Minimum execution time: 1_710_934 nanoseconds.
		Weight::from_ref_time(1_710_934_000_u64)
			// Standard Error: 94_106_896
			.saturating_add(Weight::from_ref_time(1_894_496_498_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_256(i: u32, ) -> Weight {
		// Minimum execution time: 1_917_189 nanoseconds.
		Weight::from_ref_time(114_592_375_704_u64)
			// Standard Error: 234_125_457
			.saturating_add(Weight::from_ref_time(3_067_703_114_u64).saturating_mul(i as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DataAvailability AppKeys (r:1 w:1)
	// Storage: DataAvailability NextAppId (r:1 w:1)
	fn create_application_key() -> Weight {
		// Minimum execution time: 26_209 nanoseconds.
		Weight::from_ref_time(32_160_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: System DynamicBlockLength (r:0 w:1)
	fn submit_block_length_proposal() -> Weight {
		// Minimum execution time: 17_803 nanoseconds.
		Weight::from_ref_time(22_712_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// The range of component `i` is `[1, 524288]`.
	fn submit_data(i: u32, ) -> Weight {
		// Minimum execution time: 16_220 nanoseconds.
		Weight::from_ref_time(77_813_370_u64)
			// Standard Error: 70
			.saturating_add(Weight::from_ref_time(547_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[0, 524288]`.
	fn data_root(i: u32, ) -> Weight {
		// Minimum execution time: 942 nanoseconds.
		Weight::from_ref_time(942_000_u64)
			// Standard Error: 9
			.saturating_add(Weight::from_ref_time(734_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_32(i: u32, ) -> Weight {
		// Minimum execution time: 1_382_608 nanoseconds.
		Weight::from_ref_time(1_382_608_000_u64)
			// Standard Error: 104_335_042
			.saturating_add(Weight::from_ref_time(266_654_205_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_64(i: u32, ) -> Weight {
		// Minimum execution time: 1_864_972 nanoseconds.
		Weight::from_ref_time(1_864_972_000_u64)
			// Standard Error: 76_852_825
			.saturating_add(Weight::from_ref_time(1_100_873_711_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_128(i: u32, ) -> Weight {
		// Minimum execution time: 1_710_934 nanoseconds.
		Weight::from_ref_time(1_710_934_000_u64)
			// Standard Error: 94_106_896
			.saturating_add(Weight::from_ref_time(1_894_496_498_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	fn commitment_builder_256(i: u32, ) -> Weight {
		// Minimum execution time: 1_917_189 nanoseconds.
		Weight::from_ref_time(114_592_375_704_u64)
			// Standard Error: 234_125_457
			.saturating_add(Weight::from_ref_time(3_067_703_114_u64).saturating_mul(i as u64))
	}
}
