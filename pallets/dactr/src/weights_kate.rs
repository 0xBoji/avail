// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for da_control
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-19, STEPS: `25`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `DESKTOP-PAL18UV`, CPU: `AMD Ryzen 5 5600X 6-Core Processor`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/data-avail
// benchmark
// pallet
// --chain=dev
// --steps=25
// --repeat=10
// --log=warn
// --execution=native
// --template=./.maintain/frame-weight-template.hbs
// --header=./HEADER-APACHE2
// --pallet=da-control
// --extrinsic=commitment_builder
// --output=./pallets/dactr/src/weights_kate.rs
// -linfo

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for da_control.
pub trait WeightInfo {
	fn commitment_builder(i: u32, j: u32, k: u32, l: u32, ) -> Weight;
}

/// Weights for da_control using the Data Avaiability node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `i` is `[6, 10]`.
	/// The range of component `j` is `[6, 8]`.
	/// The range of component `k` is `[0, 16384]`.
	/// The range of component `l` is `[0, 512]`.
	fn commitment_builder(i: u32, j: u32, _k: u32, _l: u32, ) -> Weight {
		// Minimum execution time: 1_804_158 nanoseconds.
		// Maximum execution time: 5_914_740_124 nanoseconds.
		Weight::from_ref_time(1_817_492_000 as u64)
			// Standard Error: 60_141_733_560
			.saturating_add(Weight::from_ref_time(299_400_832_369 as u64).saturating_mul(i as u64))
			// Standard Error: 81_668_641_563
			.saturating_add(Weight::from_ref_time(364_864_289_283 as u64).saturating_mul(j as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// The range of component `i` is `[6, 10]`.
	/// The range of component `j` is `[6, 8]`.
	/// The range of component `k` is `[0, 16384]`.
	/// The range of component `l` is `[0, 512]`.
	fn commitment_builder(i: u32, j: u32, _k: u32, _l: u32, ) -> Weight {
		// Minimum execution time: 1_804_158 nanoseconds.
		Weight::from_ref_time(1_817_492_000 as u64)
			// Standard Error: 60_141_733_560
			.saturating_add(Weight::from_ref_time(299_400_832_369 as u64).saturating_mul(i as u64))
			// Standard Error: 81_668_641_563
			.saturating_add(Weight::from_ref_time(364_864_289_283 as u64).saturating_mul(j as u64))
	}
}
