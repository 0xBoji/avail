// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for da_control
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-14, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `DESKTOP-PAL18UV`, CPU: `AMD Ryzen 5 5600X 6-Core Processor`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/data-avail
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=10
// --log=warn
// --execution=native
// --template=./.maintain/frame-weight-template.hbs
// --header=./HEADER-APACHE2
// --pallet=da-control
// --extrinsic=*
// --output=./pallets/dactr/src/weights_kate.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for da_control.
pub trait WeightInfo {
	fn create_application_key() -> Weight;
	fn submit_block_length_proposal() -> Weight;
	fn submit_data(i: u32, ) -> Weight;
	fn data_root(i: u32, ) -> Weight;
	fn commitment_builder_1() -> Weight;
	fn commitment_builder_2() -> Weight;
	fn commitment_builder_3() -> Weight;
	fn commitment_builder_4() -> Weight;
	fn commitment_builder_5() -> Weight;
	fn commitment_builder_6() -> Weight;
	fn commitment_builder_7() -> Weight;
	fn commitment_builder_8() -> Weight;
	fn commitment_builder_9() -> Weight;
	fn commitment_builder_dyn_1(k: u32, ) -> Weight;
	fn commitment_builder_dyn_2(i: u32, j: u32, ) -> Weight;
}

/// Weights for da_control using the Data Avaiability node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DataAvailability AppKeys (r:1 w:1)
	// Storage: DataAvailability NextAppId (r:1 w:1)
	fn create_application_key() -> Weight {
		// Minimum execution time: 14_928 nanoseconds.
		Weight::from_ref_time(16_611_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: DataAvailability LastBlockLenId (r:1 w:1)
	// Storage: System DynamicBlockLength (r:0 w:1)
	fn submit_block_length_proposal() -> Weight {
		// Minimum execution time: 12_674 nanoseconds.
		Weight::from_ref_time(13_345_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// The range of component `i` is `[0, 16384]`.
	fn submit_data(i: u32, ) -> Weight {
		// Minimum execution time: 9_829 nanoseconds.
		Weight::from_ref_time(10_479_400_u64)
			// Standard Error: 8
			.saturating_add(Weight::from_ref_time(122_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[0, 16384]`.
	fn data_root(i: u32, ) -> Weight {
		// Minimum execution time: 290 nanoseconds.
		Weight::from_ref_time(533_838_u64)
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(491_u64).saturating_mul(i as u64))
	}
	fn commitment_builder_1() -> Weight {
		// Minimum execution time: 1_381_125 nanoseconds.
		Weight::from_ref_time(2_039_028_000_u64)
	}
	fn commitment_builder_2() -> Weight {
		// Minimum execution time: 1_849_097 nanoseconds.
		Weight::from_ref_time(1_936_422_000_u64)
	}
	fn commitment_builder_3() -> Weight {
		// Minimum execution time: 1_387_127 nanoseconds.
		Weight::from_ref_time(2_016_835_000_u64)
	}
	fn commitment_builder_4() -> Weight {
		// Minimum execution time: 48_826_164 nanoseconds.
		Weight::from_ref_time(51_388_462_000_u64)
	}
	fn commitment_builder_5() -> Weight {
		// Minimum execution time: 1_320_898_149 nanoseconds.
		Weight::from_ref_time(1_448_695_677_000_u64)
	}
	fn commitment_builder_6() -> Weight {
		// Minimum execution time: 1_612_943 nanoseconds.
		Weight::from_ref_time(2_074_454_000_u64)
	}
	fn commitment_builder_7() -> Weight {
		// Minimum execution time: 138_079_224 nanoseconds.
		Weight::from_ref_time(142_871_248_000_u64)
	}
	fn commitment_builder_8() -> Weight {
		// Minimum execution time: 1_865_699 nanoseconds.
		Weight::from_ref_time(2_053_063_000_u64)
	}
	fn commitment_builder_9() -> Weight {
		// Minimum execution time: 3_982_080_659 nanoseconds.
		Weight::from_ref_time(4_133_287_063_000_u64)
	}
	/// The range of component `k` is `[0, 7340032]`.
	fn commitment_builder_dyn_1(k: u32, ) -> Weight {
		// Minimum execution time: 1_863_175 nanoseconds.
		Weight::from_ref_time(361_576_502_875_u64)
			// Standard Error: 37_361
			.saturating_add(Weight::from_ref_time(672_081_u64).saturating_mul(k as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	/// The range of component `j` is `[32, 256]`.
	fn commitment_builder_dyn_2(i: u32, j: u32, ) -> Weight {
		// Minimum execution time: 1_666_724 nanoseconds.
		Weight::from_ref_time(2_184_855_567_u64)
			// Standard Error: 75_435
			.saturating_add(Weight::from_ref_time(186_788_u64).saturating_mul(i as u64))
			// Standard Error: 333_554
			.saturating_add(Weight::from_ref_time(50_817_u64).saturating_mul(j as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DataAvailability AppKeys (r:1 w:1)
	// Storage: DataAvailability NextAppId (r:1 w:1)
	fn create_application_key() -> Weight {
		// Minimum execution time: 14_928 nanoseconds.
		Weight::from_ref_time(16_611_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: DataAvailability LastBlockLenId (r:1 w:1)
	// Storage: System DynamicBlockLength (r:0 w:1)
	fn submit_block_length_proposal() -> Weight {
		// Minimum execution time: 12_674 nanoseconds.
		Weight::from_ref_time(13_345_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// The range of component `i` is `[0, 16384]`.
	fn submit_data(i: u32, ) -> Weight {
		// Minimum execution time: 9_829 nanoseconds.
		Weight::from_ref_time(10_479_400_u64)
			// Standard Error: 8
			.saturating_add(Weight::from_ref_time(122_u64).saturating_mul(i as u64))
	}
	/// The range of component `i` is `[0, 16384]`.
	fn data_root(i: u32, ) -> Weight {
		// Minimum execution time: 290 nanoseconds.
		Weight::from_ref_time(533_838_u64)
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(491_u64).saturating_mul(i as u64))
	}
	fn commitment_builder_1() -> Weight {
		// Minimum execution time: 1_381_125 nanoseconds.
		Weight::from_ref_time(2_039_028_000_u64)
	}
	fn commitment_builder_2() -> Weight {
		// Minimum execution time: 1_849_097 nanoseconds.
		Weight::from_ref_time(1_936_422_000_u64)
	}
	fn commitment_builder_3() -> Weight {
		// Minimum execution time: 1_387_127 nanoseconds.
		Weight::from_ref_time(2_016_835_000_u64)
	}
	fn commitment_builder_4() -> Weight {
		// Minimum execution time: 48_826_164 nanoseconds.
		Weight::from_ref_time(51_388_462_000_u64)
	}
	fn commitment_builder_5() -> Weight {
		// Minimum execution time: 1_320_898_149 nanoseconds.
		Weight::from_ref_time(1_448_695_677_000_u64)
	}
	fn commitment_builder_6() -> Weight {
		// Minimum execution time: 1_612_943 nanoseconds.
		Weight::from_ref_time(2_074_454_000_u64)
	}
	fn commitment_builder_7() -> Weight {
		// Minimum execution time: 138_079_224 nanoseconds.
		Weight::from_ref_time(142_871_248_000_u64)
	}
	fn commitment_builder_8() -> Weight {
		// Minimum execution time: 1_865_699 nanoseconds.
		Weight::from_ref_time(2_053_063_000_u64)
	}
	fn commitment_builder_9() -> Weight {
		// Minimum execution time: 3_982_080_659 nanoseconds.
		Weight::from_ref_time(4_133_287_063_000_u64)
	}
	/// The range of component `k` is `[0, 7340032]`.
	fn commitment_builder_dyn_1(k: u32, ) -> Weight {
		// Minimum execution time: 1_863_175 nanoseconds.
		Weight::from_ref_time(361_576_502_875_u64)
			// Standard Error: 37_361
			.saturating_add(Weight::from_ref_time(672_081_u64).saturating_mul(k as u64))
	}
	/// The range of component `i` is `[32, 1024]`.
	/// The range of component `j` is `[32, 256]`.
	fn commitment_builder_dyn_2(i: u32, j: u32, ) -> Weight {
		// Minimum execution time: 1_666_724 nanoseconds.
		Weight::from_ref_time(2_184_855_567_u64)
			// Standard Error: 75_435
			.saturating_add(Weight::from_ref_time(186_788_u64).saturating_mul(i as u64))
			// Standard Error: 333_554
			.saturating_add(Weight::from_ref_time(50_817_u64).saturating_mul(j as u64))
	}
}
